name: PR Comment Trigger

on:
  issue_comment:
    types: [created]

jobs:
  process_comment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Process Comment
        id: process_comment
        run: |
          # Check if the event is a pull request comment
          if [ "${{ github.event.issue.pull_request }}" != "null" ]; then
            # This is a pull request comment
            echo "This is a pull request comment."

            # Extract the comment body and check for the specific comment text
            COMMENT_BODY=$(echo "${{ github.event.comment.body }}" | tr '[:upper:]' '[:lower:]')
            if [[ "$COMMENT_BODY" == "start test"* ]]; then
              echo "Test cases running"
              # Add your action logic here to run the test cases
              # For example, you can use a test runner like pytest, jest, etc.

              # Extract the pull request description from the comment body
              PR_DESCRIPTION=$(echo "$COMMENT_BODY" | grep -oP "(?<=## Test Cases\n).*")

              # Iterate through the checkpoints in the description
              # Assuming checkpoints are marked with the pattern "- [ ] [x] Checkpoint name"
              while IFS= read -r line; do
                if [[ $line == "- [ ] [x] "* ]]; then
                  # Get the checkpoint name
                  CHECKPOINT_NAME=$(echo "$line" | sed -e 's/- \[ \] \[x\] //')
                  echo "Running test case for checkpoint: $CHECKPOINT_NAME"
                  # Run the specific test case for the checkpoint name
                  # In this example, we will run the 'add' function test case
                  python -m unittest test_module.TestAdd.test_add_function
                  # Mark the checkpoint as completed by updating the description
                  PR_DESCRIPTION=$(echo "$PR_DESCRIPTION" | sed "s/- \[ \] \[x\] $CHECKPOINT_NAME/- [x] [ ] $CHECKPOINT_NAME/")
                fi
              done <<< "$PR_DESCRIPTION"

              # Update the pull request comment with the updated description
              UPDATED_COMMENT_BODY=$(echo "${COMMENT_BODY/## Test Cases\n*/## Test Cases\n$PR_DESCRIPTION}")
              echo "Updating the pull request comment with the updated description..."
              GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
              curl -X PATCH -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/json" -d "{\"body\": \"$UPDATED_COMMENT_BODY\"}" "${{ github.event.comment.url }}"
            else
              echo "Not the specific comment. Skipping..."
            fi
          else 
            # This is not a pull request comment
            echo "Not a pull request comment. Skipping..."
          fi
